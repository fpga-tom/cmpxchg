cmake_minimum_required(VERSION 3.12)
project(cmpxchg)

set(CMAKE_CXX_STANDARD 14)

FIND_PACKAGE(PythonInterp)

if (PYTHONINTERP_FOUND)
    if (UNIX AND NOT APPLE)
        if (PYTHON_VERSION_MAJOR EQUAL 3)
            FIND_PACKAGE(Boost COMPONENTS python${PYTHON_VERSION_SUFFIX})
            FIND_PACKAGE(PythonInterp 3)
            FIND_PACKAGE(PythonLibs 3 REQUIRED)
        else()
            FIND_PACKAGE(Boost COMPONENTS python)
            FIND_PACKAGE(PythonInterp)
            FIND_PACKAGE(PythonLibs REQUIRED)
        endif()
    else()
        if (PYTHON_VERSION_MAJOR EQUAL 3)
            FIND_PACKAGE(Boost COMPONENTS python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR})
            FIND_PACKAGE(PythonInterp 3)
            FIND_PACKAGE(PythonLibs 3 REQUIRED)
        else()
            FIND_PACKAGE(Boost COMPONENTS python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR})
            FIND_PACKAGE(PythonInterp)
            FIND_PACKAGE(PythonLibs REQUIRED)
        endif()
    endif()
else()
    message("Python not found")
endif()

INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS})

add_executable(cmpxchg main.cpp Signal.cpp Signal.h Task.cpp Task.h Module.cpp Module.h Sync.cpp Sync.h Slot.cpp Slot.h Port.cpp Port.h Rx.cpp Rx.h RxBuilder.cpp RxBuilder.h DummySink.cpp DummySink.h Waterfall.cpp Waterfall.h bindings.cpp FmDemod.cpp FmDemod.h)
target_link_libraries(cmpxchg pthread iio liquid ${Boost_LIBRARIES} ${PYTHON_LIBRARIES})